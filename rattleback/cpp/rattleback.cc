#include <cmath>
#include <Eigen/Dense>
#include <gsl/gsl_errno.h>
#include "rattleback.h"

int rattleback_ode(double t,
                   const double x[],
                   double dxdt[],
                   void *params)
{
  using namespace Eigen;
  rattleback_params *p = static_cast<rattleback_params *>(params);
  static const double a = p->a,
                      b = p->b,
                      c = p->c,
                      d = p->d,
                      e = p->e,
                      f = p->f,
                      m = p->m,
                      Ixx = p->Ixx,
                      Iyy = p->Iyy,
                      Izz = p->Izz,
                      Ixy = p->Ixy,
                      Iyz = p->Iyz,
                      Ixz = p->Ixz,
                      g = p->g;
  double z[83];
  Matrix3d M_dyn;
  Vector3d f_dyn;
  Vector3d udot;
  FullPivHouseholderQR<Matrix3d> dec;

  // Intermediate variables for ODE function
  z[0] = sin(x[2]);
  z[1] = cos(x[2]);
  z[2] = pow(c, 2);
  z[3] = cos(x[1]);
  z[4] = sin(x[1]);
  z[5] = pow(a, 2);
  z[6] = pow(b, 2);
  z[7] = cos(x[0]);
  z[8] = sin(x[0]);
  z[9] = -x[6];
  z[10] = -x[7];
  z[11] = -x[5];
  z[12] = g*m;
  z[13] = x[5]*z[0];
  z[14] = x[7]*z[1];

  dxdt[0] = (-z[13] + z[14])/z[3];
  dxdt[1] = x[5]*z[1] + x[7]*z[0];
  dxdt[2] = x[6] + (z[13] - z[14])*tan(x[1]);

  z[15] = pow(z[3], 2);
  z[16] = pow(z[1], 2);
  z[17] = pow(z[0], 2);
  z[18] = -z[0];
  z[19] = dxdt[1]*z[4];
  z[20] = dxdt[1]*z[3];
  z[21] = z[1]*z[7];
  z[22] = z[1]*z[5];
  z[23] = z[0]*z[4];
  z[24] = z[3]*z[5];
  z[25] = z[1]*z[8];
  z[26] = z[1]*z[3];
  z[27] = z[16]*z[2];
  z[28] = Ixz*x[5] + Iyz*x[6] + Izz*x[7];
  z[29] = Ixy*x[5] + Iyy*x[6] + Iyz*x[7];
  z[30] = Ixx*x[5] + Ixy*x[6] + Ixz*x[7];
  z[31] = dxdt[2]*z[0]*z[15];
  z[32] = z[15]*z[17]*z[5] + z[15]*z[27] + pow(z[4], 2)*z[6];
  z[33] = pow(z[32], -1.0/2.0);
  z[34] = pow(z[33], 3);
  z[35] = z[33]*z[5];
  z[36] = z[2]*z[33];
  z[37] = z[33]*z[6];
  z[38] = dxdt[2]*z[3]*z[33];
  z[39] = e - z[37]*z[4];
  z[40] = z[37]*z[4];
  z[41] = -e + z[40];
  z[42] = x[5]*z[39];
  z[43] = m*z[41];
  z[44] = m*z[39];
  z[45] = -f + z[26]*z[36];
  z[46] = z[26]*z[36];
  z[47] = f - z[46];
  z[48] = z[10]*z[39];
  z[49] = d + z[0]*z[24]*z[33];
  z[50] = -z[49];
  z[51] = dxdt[2]*z[0]*z[3]*z[36];
  z[52] = z[1]*z[19]*z[36];
  z[53] = x[6]*z[47];
  z[54] = m*z[47];
  z[55] = z[50];
  z[56] = x[7]*z[49];
  z[57] = m*z[49];
  z[58] = z[49]*z[9];
  z[59] = z[1]*z[2]*z[31] + z[17]*z[19]*z[24] + z[19]*z[27]*z[3] - z[19]*z[3]*z[6] - z[22]*z[31];
  z[60] = -Iyz - z[43]*z[47];
  z[61] = -Ixy - z[44]*z[50];
  z[62] = z[45]*z[9] + z[48];
  z[63] = z[51] + z[52];
  z[64] = z[11]*z[41] + z[58];
  z[65] = -Ixz - z[45]*z[57];
  z[66] = z[10]*z[55] + z[11]*z[47];
  z[67] = z[34]*z[59];
  z[68] = -z[67];
  z[69] = z[2]*z[67];
  z[70] = z[4]*z[6]*z[67];
  z[71] = z[26]*z[69];
  z[72] = z[20]*z[37] + z[70];
  z[73] = -z[72];
  z[74] = -z[20]*z[37] + z[4]*z[6]*z[68];
  z[75] = z[3]*z[72];
  z[76] = z[63] - z[71];
  z[77] = z[0]*z[19]*z[35] + z[18]*z[24]*z[34]*(z[1]*z[2]*z[31] + z[17]*z[19]*z[3]*z[5] + z[19]*z[27]*z[3] - z[19]*z[3]*z[6] - z[22]*z[31]) - z[22]*z[38];
  z[78] = z[0]*z[24]*z[34]*(z[1]*z[2]*z[31] + z[17]*z[19]*z[3]*z[5] + z[19]*z[27]*z[3] - z[19]*z[3]*z[6] - z[22]*z[31]) + z[18]*z[19]*z[35] + z[22]*z[38];
  z[79] = x[7]*z[78];
  z[80] = z[11]*z[76];
  z[81] = z[78]*z[9];
  z[82] = z[79] + z[80];

  // Kinematic differential equations
  dxdt[3] = -z[75]*z[8] + z[77]*(z[21] - z[23]*z[8]) + (z[0]*z[7] + z[25]*z[4])*(dxdt[2]*z[18]*z[3]*z[36] - z[52] + z[71]);
  dxdt[4] = z[7]*z[75] + z[77]*(z[23]*z[7] + z[25]) + (-z[63] + z[71])*(z[0]*z[8] - z[21]*z[4]);

  // Mass matrix
  M_dyn(0, 0) = -Ixx - m*pow(z[45], 2) - z[39]*z[44];
  M_dyn(0, 1) = z[61];
  M_dyn(0, 2) = z[65];
  M_dyn(1, 0) = z[61];
  M_dyn(1, 1) = -Iyy - m*pow(z[50], 2) - z[47]*z[54];
  M_dyn(1, 2) = z[60];
  M_dyn(2, 0) = z[65];
  M_dyn(2, 1) = z[60];
  M_dyn(2, 2) = -Izz - z[41]*z[43] - z[49]*z[57];
  
  // Right hand side of dynamic equations
  f_dyn(0) = m*z[45]*(x[7]*z[62] + z[11]*(z[42] + z[58]) + z[82]) + x[6]*z[28] - x[7]*z[29] - z[12]*(z[26]*z[39] + z[4]*z[45]) + z[44]*(x[5]*z[74] + x[5]*(x[5]*z[45] + z[56]) + z[81] + z[9]*(-x[6]*z[45] + z[48]));
  f_dyn(1) = m*z[55]*(x[5]*z[66] + x[5]*z[73] + z[81] + z[9]*(z[48] + z[53])) - x[5]*z[28] + x[7]*z[30] - z[12]*(-z[0]*z[3]*z[47] + z[26]*z[55]) + z[54]*(x[6]*(x[6]*z[55] + z[42]) + x[6]*(z[2]*z[26]*z[68] + z[63]) + z[10]*z[73] + z[10]*(-x[7]*z[55] + z[11]*z[47]));
  f_dyn(2) = x[5]*z[29] - x[6]*z[30] - z[12]*(z[18]*z[3]*z[41] + z[4]*z[49]) + z[43]*(x[6]*z[64] + x[6]*z[76] + z[10]*z[74] + z[10]*(-x[5]*z[47] + z[56])) + z[57]*(x[7]*(x[7]*z[41] + z[53]) + z[11]*(-x[5]*z[41] + z[58]) + z[82]);

  // Solve M_dyn*du/dt = f_dyn for du/dt
  dec.compute(M_dyn);
  udot = dec.solve(f_dyn);
  dxdt[5] = udot(0);
  dxdt[6] = udot(1);
  dxdt[7] = udot(2);
  return GSL_SUCCESS;
}

int rattleback_jacobian(double t,
                        const double x[],
                        double dfdx[],
                        double dfdt[],
                        void *params)
{
  rattleback_params *p = static_cast<rattleback_params *>(params);
  static const double a = p->a,
                      b = p->b,
                      c = p->c,
                      d = p->d,
                      e = p->e,
                      f = p->f,
                      m = p->m,
                      Ixx = p->Ixx,
                      Iyy = p->Iyy,
                      Izz = p->Izz,
                      Ixy = p->Ixy,
                      Iyz = p->Iyz,
                      Ixz = p->Ixz,
                      g = p->g;
  dfdt[0] = dfdt[1] = dfdt[2] = dfdt[3] = dfdt[4] = dfdt[5] = dfdt[6] = dfdt[7] = 0.0;
  double z[398];

  // Intermediate quantities needed for Jacobian matrix
  z[0] = cos(x[1]);
  z[1] = sin(x[2]);
  z[2] = cos(x[2]);
  z[3] = tan(x[1]);
  z[4] = sin(x[1]);
  z[5] = pow(c, 2);
  z[6] = pow(a, 2);
  z[7] = pow(b, 2);
  z[8] = sin(x[0]);
  z[9] = cos(x[0]);
  z[10] = Izz*x[7];
  z[11] = Ixy*x[7];
  z[12] = Iyy*x[6];
  z[13] = Ixx*x[5];
  z[14] = Iyz*x[5];
  z[15] = Ixz*x[6];
  z[16] = -x[6];
  z[17] = -x[5];
  z[18] = 2*x[6];
  z[19] = -x[7];
  z[20] = 2*x[5];
  z[21] = -m;
  z[22] = 2*x[7];
  z[23] = g*m;
  z[24] = 1.0/z[0];
  z[25] = x[5]*z[1];
  z[26] = x[7]*z[2];
  z[27] = pow(z[24], -2);
  z[28] = pow(z[1], 2);
  z[29] = pow(z[2], 2);
  z[30] = pow(z[4], 2);
  z[31] = -z[0];
  z[32] = -z[2];
  z[33] = 2*z[5];
  z[34] = -z[4];
  z[35] = 2*z[2];
  z[36] = -z[1];
  z[37] = pow(z[3], 2) + 1;
  z[38] = z[1]*z[8];
  z[39] = z[0]*z[4];
  z[40] = z[1]*z[6];
  z[41] = z[4]*z[6];
  z[42] = z[1]*z[4];
  z[43] = z[3]*z[6];
  z[44] = z[0]*z[2];
  z[45] = z[0]*z[3];
  z[46] = z[0]*z[1];
  z[47] = z[1]*z[2];
  z[48] = z[0]*z[9];
  z[49] = z[1]*z[3];
  z[50] = -z[30];
  z[51] = z[0]*z[8];
  z[52] = -z[29];
  z[53] = z[2]*z[8];
  z[54] = z[4]*z[9];
  z[55] = z[2]*z[3];
  z[56] = z[2]*z[4];
  z[57] = -z[25] + z[26];
  z[58] = z[25] - z[26];
  z[59] = z[2]*z[31];
  z[60] = z[28]*z[6];
  z[61] = z[27]*z[5];
  z[62] = z[2]*z[27];
  z[63] = z[29]*z[5];
  z[64] = x[5]*z[2] + x[7]*z[1];
  z[65] = z[2]*z[54];
  z[66] = z[27]*z[29];
  z[67] = z[58]*z[6];
  z[68] = z[58]*z[7];
  z[69] = z[4]*z[58];
  z[70] = x[6] + z[3]*z[58];
  z[71] = z[1]*z[64];
  z[72] = z[0]*z[64];
  z[73] = z[4]*z[64];
  z[74] = z[64]*z[7];
  z[75] = z[3]*z[64];
  z[76] = z[2]*z[9] - z[38]*z[4];
  z[77] = -z[38] + z[65];
  z[78] = z[38] - z[65];
  z[79] = z[37]*z[58];
  z[80] = z[29]*z[64];
  z[81] = z[1]*z[9] + z[4]*z[53];
  z[82] = -z[81];
  z[83] = z[42]*z[9] + z[53];
  z[84] = z[1]*z[70];
  z[85] = z[56]*z[64];
  z[86] = z[6]*z[70];
  z[87] = z[2]*z[70];
  z[88] = z[30]*z[74];
  z[89] = z[27]*z[70];
  z[90] = z[29]*z[70];
  z[91] = z[28]*z[70];
  z[92] = z[47]*z[70];
  z[93] = z[27]*z[60]*z[64];
  z[94] = z[61]*z[80];
  z[95] = z[39]*z[60]*z[64];
  z[96] = z[39]*z[63]*z[64];
  z[97] = z[28]*z[31]*z[41]*z[58];
  z[98] = z[31]*z[63]*z[69];
  z[99] = z[60]*z[89];
  z[100] = z[61]*z[90];
  z[101] = z[61]*z[92];
  z[102] = -z[40]*z[62] + z[47]*z[61];
  z[103] = z[47]*z[61]*z[75];
  z[104] = z[35]*z[39]*z[40]*z[64];
  z[105] = z[47]*z[61]*z[79];
  z[106] = -3*z[40]*z[62] + 3*z[47]*z[61];
  z[107] = z[35]*z[39]*z[40]*z[70];
  z[108] = z[102]*z[4];
  z[109] = z[1]*z[102];
  z[110] = m*z[108];
  z[111] = z[27]*z[60] + z[29]*z[61] + z[30]*z[7];
  z[112] = z[39]*z[60] + z[39]*z[63] - z[39]*z[7];
  z[113] = pow(z[111], -1.0/2.0);
  z[114] = pow(z[113], 3);
  z[115] = pow(z[114], 5.0/3.0);
  z[116] = z[113]*z[6];
  z[117] = z[114]*z[5];
  z[118] = z[114]*z[7];
  z[119] = -z[114];
  z[120] = z[102]*z[70];
  z[121] = z[114]*z[6];
  z[122] = z[113]*z[5];
  z[123] = z[113]*z[7];
  z[124] = z[115]*z[5];
  z[125] = z[0]*z[115];
  z[126] = z[120];
  z[127] = z[0]*z[114];
  z[128] = z[115]*z[7];
  z[129] = 3*z[39]*z[60] + 3*z[39]*z[63] - 3*z[39]*z[7];
  z[130] = e - z[123]*z[4];
  z[131] = z[123]*z[4];
  z[132] = -e + z[131];
  z[133] = z[122]*z[4];
  z[134] = z[102]*z[84];
  z[135] = z[128]*z[4];
  z[136] = x[7]*z[130];
  z[137] = x[5]*z[130];
  z[138] = x[6]*z[130];
  z[139] = m*z[130];
  z[140] = -z[130];
  z[141] = m*z[132];
  z[142] = f - z[122]*z[44];
  z[143] = z[122]*z[44];
  z[144] = -f + z[143];
  z[145] = z[122]*z[46];
  z[146] = z[132]*z[16];
  z[147] = d + z[0]*z[113]*z[40];
  z[148] = x[6]*z[142];
  z[149] = z[113]*z[4]*z[63];
  z[150] = z[113]*z[28]*z[41];
  z[151] = -z[147];
  z[152] = x[5]*z[142];
  z[153] = x[7]*z[142];
  z[154] = 2*z[144];
  z[155] = m*z[144];
  z[156] = m*z[142];
  z[157] = x[7]*z[147];
  z[158] = z[113]*z[40]*z[56];
  z[159] = z[122]*z[2]*z[42];
  z[160] = z[142]*z[17];
  z[161] = z[151];
  z[162] = x[6]*z[147];
  z[163] = z[144]*z[19];
  z[164] = z[112]*z[70];
  z[165] = z[164];
  z[166] = m*z[147];
  z[167] = m*z[151];
  z[168] = z[122]*z[28]*z[45];
  z[169] = z[0]*z[113]*z[29]*z[43];
  z[170] = z[0]*z[113]*z[68];
  z[171] = z[151]*z[17];
  z[172] = m*z[161];
  z[173] = z[123]*z[73];
  z[174] = z[113]*z[3]*z[40]*z[44];
  z[175] = z[123]*z[72];
  z[176] = z[161]*z[18];
  z[177] = z[114]*z[86];
  z[178] = z[113]*z[31]*z[74];
  z[179] = z[113]*z[40]*z[69];
  z[180] = z[113]*z[40]*z[73];
  z[181] = z[113]*z[34]*z[40]*z[58];
  z[182] = z[113]*z[2]*z[41]*z[64];
  z[183] = z[122]*z[42]*z[64];
  z[184] = z[122]*z[85];
  z[185] = z[122]*z[32]*z[69];
  z[186] = z[143]*z[64];
  z[187] = z[122]*z[32]*z[73];
  z[188] = z[113]*z[34]*z[40]*z[64];
  z[189] = z[113]*z[31]*z[40]*z[64];
  z[190] = z[122]*z[34]*z[71];
  z[191] = z[113]*z[32]*z[41]*z[64];
  z[192] = z[0]*z[113]*z[40]*z[70];
  z[193] = z[113]*z[44]*z[86];
  z[194] = z[145]*z[70];
  z[195] = z[113]*z[43]*z[44]*z[64];
  z[196] = z[122]*z[45]*z[71];
  z[197] = z[143]*z[70];
  z[198] = z[113]*z[59]*z[86];
  z[199] = z[122]*z[31]*z[84];
  z[200] = z[145]*z[79];
  z[201] = z[122]*z[34]*z[84];
  z[202] = z[113]*z[37]*z[44]*z[67];
  z[203] = z[113]*z[32]*z[41]*z[70];
  z[204] = z[113]*z[31]*z[40]*z[70];
  z[205] = z[102]*z[114];
  z[206] = z[106]*z[115];
  z[207] = z[102]*z[121];
  z[208] = x[7]*z[108]*z[118];
  z[209] = z[102]*z[117]*z[44];
  z[210] = z[108]*z[118]*z[17];
  z[211] = z[112]*z[114];
  z[212] = z[101] + z[95] + z[96];
  z[213] = z[115]*z[129];
  z[214] = z[2]*z[39]*z[60] - z[2]*z[39]*z[7] - z[28]*z[43]*z[62] + z[28]*z[55]*z[61] + sqrt(z[29])*z[39]*z[63];
  z[215] = z[1]*z[39]*z[63] - z[1]*z[39]*z[7] + sqrt(z[28])*z[39]*z[60] - z[29]*z[49]*z[61] + z[3]*z[40]*z[66];
  z[216] = z[205]*z[31]*z[74];
  z[217] = z[128]*z[129];
  z[218] = z[114]*z[40]*z[73]*(-z[27]*z[47]*z[6] + z[47]*z[61]);
  z[219] = z[102]*z[117]*z[85];
  z[220] = z[114]*z[34]*z[40]*z[64]*(-z[27]*z[47]*z[6] + z[47]*z[61]);
  z[221] = z[129]*z[135];
  z[222] = z[117]*z[126]*z[46];
  z[223] = z[102]*z[177]*z[44];
  z[224] = z[112]*z[118]*z[72];
  z[225] = -z[136] + z[148];
  z[226] = z[211]*z[31]*z[74];
  z[227] = z[130]*z[19] + z[148];
  z[228] = z[112]*z[117]*z[85];
  z[229] = z[137] - z[162];
  z[230] = z[137] + z[147]*z[16];
  z[231] = z[211]*z[34]*z[40]*z[64];
  z[232] = x[7]*z[227];
  z[233] = z[117]*z[165]*z[46];
  z[234] = z[112]*z[177]*z[44];
  z[235] = -z[152] + z[157];
  z[236] = z[149] + z[168];
  z[237] = z[150] + z[169];
  z[238] = z[160] + z[161]*z[19];
  z[239] = z[184] + z[194];
  z[240] = z[180] + z[198];
  z[241] = z[187] + z[199];
  z[242] = -z[145] + z[209];
  z[243] = z[212] - z[39]*z[74] - z[40]*z[62]*z[70];
  z[244] = z[1]*z[122]*z[31] + z[209];
  z[245] = z[116]*z[44] + z[127]*z[40]*(-z[27]*z[47]*z[6] + z[47]*z[61]);
  z[246] = -z[245];
  z[247] = z[102]*z[117]*z[59] + z[145];
  z[248] = z[212] + z[31]*z[7]*z[73] + z[32]*z[40]*z[89];
  z[249] = z[114]*z[31]*z[40]*(-z[27]*z[47]*z[6] + z[47]*z[61]) + z[116]*z[59];
  z[250] = x[7]*z[245];
  z[251] = x[6]*z[247];
  z[252] = z[105] + z[107] + z[88] + z[93] + z[94];
  z[253] = -z[0]*z[123] - z[112]*z[118]*z[4];
  z[254] = z[16]*z[245];
  z[255] = z[0]*z[123] + z[112]*z[118]*z[4];
  z[256] = z[17]*z[247];
  z[257] = z[243]*z[4];
  z[258] = z[112]*z[118]*z[34] + z[123]*z[31];
  z[259] = z[0]*z[248];
  z[260] = z[248]*z[4];
  z[261] = z[117]*z[214]*z[44];
  z[262] = z[127]*z[214]*z[40];
  z[263] = z[127]*z[40]*(z[1]*z[39]*z[63] - z[1]*z[39]*z[7] + z[1]*z[43]*z[66] + sqrt(z[28])*z[39]*z[60] - z[29]*z[49]*z[61]);
  z[264] = z[112]*z[117]*z[59] + z[122]*z[56];
  z[265] = z[112]*z[127]*z[40] + z[113]*z[34]*z[40];
  z[266] = z[112]*z[117]*z[44] + z[133]*z[32];
  z[267] = z[113]*z[4]*z[40] + z[211]*z[31]*z[40];
  z[268] = x[6]*z[264];
  z[269] = z[170] + z[216];
  z[270] = z[16]*z[265];
  z[271] = z[100] + z[103] + z[104] + z[97] + z[98] + z[99];
  z[272] = z[106]*z[243];
  z[273] = z[106]*z[248];
  z[274] = z[115]*z[243];
  z[275] = z[114]*z[243];
  z[276] = z[115]*z[248];
  z[277] = z[124]*z[243];
  z[278] = z[129]*z[243];
  z[279] = z[128]*z[248];
  z[280] = z[118]*z[257];
  z[281] = z[129]*z[248];
  z[282] = z[118]*z[243]*z[34];
  z[283] = z[117]*z[243]*z[44];
  z[284] = z[127]*z[40]*(z[212] - z[27]*z[47]*z[86] - z[39]*z[74]);
  z[285] = z[121]*z[248]*z[44];
  z[286] = z[127]*z[40]*(z[212] + z[27]*z[32]*z[6]*z[84] + z[31]*z[7]*z[73]);
  z[287] = z[117]*z[248]*z[44];
  z[288] = z[117]*z[248]*z[46];
  z[289] = z[114]*z[31]*z[40]*(z[212] - z[27]*z[47]*z[86] - z[39]*z[74]);
  z[290] = z[117]*z[248]*z[56];
  z[291] = z[117]*z[243]*z[59];
  z[292] = z[114]*z[34]*z[40]*(z[212] + z[27]*z[32]*z[6]*z[84] + z[31]*z[7]*z[73]);
  z[293] = z[117]*z[59]*(z[212] + z[32]*z[40]*z[89] + z[34]*z[7]*z[72]);
  z[294] = z[118]*z[214]*z[4] + z[123]*z[44];
  z[295] = z[118]*z[215]*z[4] + z[123]*z[46];
  z[296] = z[118]*z[214]*z[34] + z[123]*z[59];
  z[297] = z[1]*z[123]*z[31] + z[118]*z[215]*z[34];
  z[298] = x[5]*z[296];
  z[299] = x[5]*z[297];
  z[300] = z[19]*z[296];
  z[301] = z[117]*z[215]*z[44] + z[143]*z[49];
  z[302] = z[174] + z[262];
  z[303] = z[206]*z[243];
  z[304] = z[206]*z[248];
  z[305] = z[16]*z[242] + z[208];
  z[306] = z[208] + z[251];
  z[307] = z[210] + z[254];
  z[308] = z[128]*z[273]*z[34];
  z[309] = z[124]*z[273]*z[44];
  z[310] = z[125]*z[40]*(-3*z[27]*z[47]*z[6] + 3*z[47]*z[61])*(z[212] + z[27]*z[32]*z[6]*z[84] + z[31]*z[7]*z[73]);
  z[311] = z[17]*(x[5]*z[102]*z[118]*z[34] + z[254]);
  z[312] = z[213]*z[243];
  z[313] = z[106]*z[124]*z[59]*(z[212] + z[32]*z[40]*z[89] + z[34]*z[7]*z[72]);
  z[314] = z[217]*z[248];
  z[315] = z[125]*z[129]*z[40]*(z[212] + z[27]*z[32]*z[6]*z[84] + z[31]*z[7]*z[73]);
  z[316] = z[124]*z[129]*z[59]*(z[212] + z[32]*z[40]*z[89] + z[34]*z[7]*z[72]);
  z[317] = z[175] + z[280];
  z[318] = z[162] + z[283];
  z[319] = z[118]*z[248]*z[34] + z[178];
  z[320] = x[5]*z[319];
  z[321] = -z[237] + z[263];
  z[322] = z[236] - z[261];
  z[323] = z[193] + z[284];
  z[324] = z[114]*z[31]*z[40]*(z[1]*z[39]*z[63] - z[1]*z[39]*z[7] + z[1]*z[43]*z[66] + sqrt(z[28])*z[39]*z[60] - z[29]*z[49]*z[61]) + z[237];
  z[325] = x[6]*z[322];
  z[326] = z[193] + z[286];
  z[327] = -z[159] + z[301];
  z[328] = -z[158] + z[302];
  z[329] = z[16]*z[321];
  z[330] = z[159] - z[301];
  z[331] = z[113]*z[31]*z[40]*z[55] + z[114]*z[214]*z[31]*z[40] + z[158];
  z[332] = z[117]*z[215]*z[59] + z[122]*z[3]*z[31]*z[47] + z[159];
  z[333] = z[113]*z[32]*z[4]*z[40] + z[302];
  z[334] = z[252] - z[27]*z[74] - z[30]*z[60]*z[64] - z[30]*z[63]*z[64] - z[33]*z[39]*z[92] - z[40]*z[62]*z[79];
  z[335] = z[252] + z[27]*z[32]*z[40]*z[79] - z[27]*z[74] + z[33]*z[42]*z[59]*z[70] + z[50]*z[60]*z[64] + z[50]*z[63]*z[64];
  z[336] = z[250] + z[256];
  z[337] = z[19]*z[246] + z[256];
  z[338] = z[176] + z[306];
  z[339] = z[181] + z[182] + z[192] + z[218];
  z[340] = z[19]*z[253] + z[268];
  z[341] = z[185] + z[196] + z[197] + z[219];
  z[342] = x[5]*z[258] + z[270];
  z[343] = z[19]*z[258] + z[268];
  z[344] = x[6]*z[342];
  z[345] = x[7]*z[265] + z[17]*z[264];
  z[346] = x[5]*z[345];
  z[347] = -z[27]*z[40]*z[55]*z[64] + z[271] - z[31]*z[4]*z[68] - z[33]*z[39]*z[47]*z[64] - z[61]*z[91] - z[66]*z[86];
  z[348] = z[27]*z[32]*z[40]*z[75] + z[27]*z[52]*z[86] + z[271] + z[33]*z[42]*z[59]*z[64] + z[39]*z[68] - z[61]*z[91];
  z[349] = z[114]*z[334];
  z[350] = z[180] - z[323];
  z[351] = z[114]*z[335];
  z[352] = z[241] + z[283];
  z[353] = -z[180] + z[326];
  z[354] = z[239] + z[291];
  z[355] = z[241] + z[287];
  z[356] = z[114]*z[31]*z[40]*(z[212] + z[27]*z[32]*z[6]*z[84] + z[34]*z[7]*z[72]) + z[240];
  z[357] = z[188] + z[326];
  z[358] = z[239] + z[293];
  z[359] = z[16]*z[357];
  z[360] = z[118]*z[335]*z[34];
  z[361] = z[127]*z[40]*(z[1]*z[27]*z[32]*z[37]*z[67] + z[105] - z[27]*z[74] + z[33]*z[42]*z[59]*z[70] + z[35]*z[39]*z[6]*z[84] + z[50]*z[60]*z[64] + z[50]*z[63]*z[64] + z[88] + z[93] + z[94]);
  z[362] = z[117]*z[59]*(z[252] + z[27]*z[32]*z[40]*z[79] - z[27]*z[74] + z[32]*z[33]*z[39]*z[84] + z[50]*z[60]*z[64] + z[50]*z[63]*z[64]);
  z[363] = z[118]*z[34]*z[348];
  z[364] = z[117]*z[348]*z[44];
  z[365] = z[127]*z[40]*(z[100] + z[103] + z[27]*z[32]*z[43]*z[71] + z[27]*z[52]*z[86] + z[33]*z[42]*z[59]*z[64] + z[35]*z[39]*z[6]*z[71] + z[39]*z[68] - z[61]*z[91] + z[97] + z[98] + z[99]);
  z[366] = z[117]*z[59]*(z[0]*z[34]*z[58]*z[60] + z[0]*z[34]*z[58]*z[63] + z[100] + z[103] + z[104] + z[27]*z[32]*z[40]*z[75] + z[27]*z[52]*z[86] + z[32]*z[33]*z[39]*z[71] + z[39]*z[68] - z[61]*z[91] + z[99]);
  z[367] = z[179] + z[191] + z[204] + z[220] + z[223];
  z[368] = z[189] + z[202] + z[203] + z[231] + z[234];
  z[369] = z[292] + z[315];
  z[370] = z[290] + z[316];
  z[371] = z[178] + z[282] + z[298];
  z[372] = z[299] + z[329];
  z[373] = z[300] + z[325];
  z[374] = z[195] + z[285] + z[310];
  z[375] = z[173] + z[226] + z[360];
  z[376] = z[320] + z[359];
  z[377] = z[183] + z[309] + z[364];
  z[378] = z[118]*z[34]*z[347] + z[269] + z[308];
  z[379] = z[102]*z[118]*z[72] + z[113]*z[31]*z[68] + z[118]*z[348]*z[4] + z[135]*z[273];
  z[380] = z[186] + z[200] + z[201] + z[228] + z[233] + z[362];
  z[381] = x[6]*z[229] + x[6]*z[354] - x[7]*z[235] + x[7]*z[317];
  z[382] = m*z[381];
  z[383] = x[5]*z[238] + z[16]*z[227] + z[376];
  z[384] = m*z[383];
  z[385] = x[6]*z[358] + x[6]*(x[6]*z[161] + z[137]) + z[19]*z[319] + z[19]*(-x[7]*z[161] + z[160]);
  z[386] = m*z[385];
  z[387] = x[7]*(z[188] + z[323]) + z[17]*z[229] + z[17]*z[354] + z[232];
  z[388] = m*z[387];
  z[389] = z[190] + z[222] + z[288] + z[313] + z[341];
  z[390] = z[0]*z[118]*z[243] + z[113]*z[34]*z[74] + z[118]*z[335]*z[4] + z[221]*z[243] + z[224];
  z[391] = -z[118]*z[259] - z[118]*z[334]*z[4] + z[173] - z[221]*z[248] - z[224];
  z[392] = z[1]*z[122]*z[31]*z[79] + z[112]*z[117]*z[31]*z[84] + z[112]*z[117]*z[32]*z[73] + z[117]*z[257]*z[32] + z[117]*z[335]*z[44] + z[122]*z[42]*z[70] + z[122]*z[59]*z[64] + z[129]*z[277]*z[44];
  z[393] = z[112]*z[177]*z[59] + z[113]*z[37]*z[59]*z[67] + z[113]*z[40]*z[72] + z[113]*z[41]*z[87] + z[114]*z[31]*z[40]*(z[1]*z[27]*z[32]*z[37]*z[67] + z[105] - z[27]*z[74] + z[32]*z[33]*z[39]*z[84] + z[35]*z[39]*z[6]*z[84] + z[50]*z[60]*z[64] + z[50]*z[63]*z[64] + z[88] + z[93] + z[94]) + z[114]*z[4]*z[40]*(z[212] - z[27]*z[47]*z[86] - z[39]*z[74]) + z[211]*z[40]*z[73] + z[213]*z[31]*z[40]*(z[212] - z[27]*z[47]*z[86] - z[39]*z[74]);
  z[394] = z[117]*z[243]*z[56] + z[129]*z[277]*z[59] + z[380];
  z[395] = z[361] + z[368] + z[369];
  z[396] = z[117]*z[243]*z[46] + z[124]*z[272]*z[59] + z[190] + z[222] + z[341] + z[366];
  z[397] = z[365] + z[367] + z[374];

  // Entries of Jacobian matrix
  dfdx[0] = 0;
  dfdx[1] = z[4]*z[57]/z[27];
  dfdx[2] = -z[24]*z[64];
  dfdx[3] = 0;
  dfdx[4] = 0;
  dfdx[5] = z[24]*z[36];
  dfdx[6] = 0;
  dfdx[7] = z[2]*z[24];
  dfdx[8] = 0;
  dfdx[9] = 0;
  dfdx[10] = z[57];
  dfdx[11] = 0;
  dfdx[12] = 0;
  dfdx[13] = z[2];
  dfdx[14] = 0;
  dfdx[15] = z[1];
  dfdx[16] = 0;
  dfdx[17] = z[79];
  dfdx[18] = z[75];
  dfdx[19] = 0;
  dfdx[20] = 0;
  dfdx[21] = z[49];
  dfdx[22] = 1;
  dfdx[23] = z[3]*z[32];
  dfdx[24] = -z[317]*z[48] - z[350]*z[83] + z[352]*z[77];
  dfdx[25] = -z[0]*z[38]*(z[240] + z[289]) + z[317]*z[4]*z[8] - z[390]*z[51] + z[392]*z[81] + z[393]*z[76] + z[44]*z[8]*(z[0]*z[117]*z[2]*z[243] - z[239]);
  dfdx[26] = z[355]*z[76] + z[356]*z[82] - z[379]*z[51] + z[76]*(z[102]*z[177]*z[59] + z[113]*z[43]*z[59]*z[64] + z[114]*z[31]*z[40]*(z[0]*z[34]*z[58]*z[60] + z[0]*z[34]*z[58]*z[63] + z[100] + z[103] + z[27]*z[32]*z[43]*z[71] + z[27]*z[52]*z[86] + z[32]*z[33]*z[39]*z[71] + z[35]*z[39]*z[6]*z[71] + z[39]*z[68] - z[61]*z[91] + z[99]) + z[115]*z[31]*z[40]*(-3*z[27]*z[47]*z[6] + 3*z[47]*z[61])*(z[212] + z[27]*z[32]*z[6]*z[84] + z[34]*z[7]*z[72]) + z[121]*z[59]*(z[212] + z[32]*z[40]*z[89] + z[34]*z[7]*z[72]) + z[339]) - z[82]*(-z[222] - z[288] - z[341] + z[377]);
  dfdx[27] = 0;
  dfdx[28] = 0;
  dfdx[29] = -z[294]*z[51] + z[331]*z[76] + z[81]*(-z[236] + z[261]);
  dfdx[30] = -z[102]*z[118]*z[39]*z[8] + z[244]*z[81] + z[249]*z[76];
  dfdx[31] = -z[295]*z[51] + z[324]*z[76] + z[327]*z[81];
  dfdx[32] = -z[317]*z[51] + z[350]*z[76] + z[352]*z[81];
  dfdx[33] = -z[317]*z[54] + z[350]*z[46]*z[9] + z[390]*z[48] + z[392]*z[78] + z[393]*z[83] - z[44]*z[9]*(z[0]*z[117]*z[2]*z[243] + z[241]);
  dfdx[34] = z[355]*z[83] + z[356]*z[77] + z[379]*z[48] - z[77]*(z[1]*z[117]*z[31]*(z[212] + z[32]*z[40]*z[89] + z[34]*z[7]*z[72]) + z[102]*z[117]*z[32]*z[73] + z[117]*z[134]*z[31] + z[122]*z[31]*z[49]*z[64] + z[122]*z[56]*z[58] + z[122]*z[59]*z[70] + z[377]) + z[83]*(-z[223] + z[339] - z[365] - z[374]);
  dfdx[35] = 0;
  dfdx[36] = 0;
  dfdx[37] = z[294]*z[48] + z[331]*z[83] + z[78]*(z[113]*z[34]*z[63] + z[122]*z[28]*z[3]*z[31] + z[261]);
  dfdx[38] = z[102]*z[118]*z[39]*z[9] + z[244]*z[78] + z[249]*z[83];
  dfdx[39] = z[295]*z[48] + z[324]*z[83] + z[327]*z[78];
  dfdx[40] = 0;
  dfdx[41] = m*z[253]*(x[5]*z[235] - x[6]*z[227] - x[6]*z[353] + z[320]) + m*z[266]*(x[7]*z[353] + z[17]*z[230] + z[17]*z[358] + z[232]) + z[139]*(x[5]*(z[118]*z[31]*(z[212] + z[32]*z[40]*z[89] + z[34]*z[7]*z[72]) + z[314]*z[34] + z[375]) + z[16]*z[340] + z[16]*z[395] + z[346]) + z[142]*z[21]*(x[7]*z[340] + x[7]*z[395] + z[17]*(z[370] + z[380]) + z[17]*(x[5]*z[253] + z[270])) - z[23]*(z[130]*z[32]*z[4] + z[142]*z[31] + z[253]*z[44] + z[266]*z[4]);
  dfdx[42] = m*z[242]*(-x[5]*z[230] - x[5]*(z[239] - z[287]) + x[7]*z[225] + x[7]*z[357]) - z[110]*z[118]*(x[5]*(z[157] + z[160]) + x[5]*(z[114]*z[248]*z[34]*z[7] + z[178]) + z[16]*z[225] + z[359]) + z[139]*(x[5]*(x[5]*z[242] + z[250]) + x[5]*(z[269] + z[308] + z[363]) + z[16]*z[397] + z[16]*(-x[6]*z[242] + z[208])) + z[142]*z[21]*(x[7]*z[305] + x[7]*z[397] + z[17]*(z[366] + z[389]) + z[311]) - z[23]*(z[1]*z[130]*z[31] + z[102]*z[118]*z[31]*z[56] + z[242]*z[4]);
  dfdx[43] = 0;
  dfdx[44] = 0;
  dfdx[45] = -z[11] + z[139]*(z[144]*z[20] + z[157] + z[16]*z[328] + z[371]) + z[15] + z[155]*(-x[5]*(z[117]*z[214]*z[59] + z[236]) + x[7]*z[328] - z[130]*z[20] - z[239] + z[318]);
  dfdx[46] = Ixz*x[5] - Iyy*x[7] + Iyz*z[18] + z[10] + z[139]*(z[136] + z[144]*z[18] + z[240] + z[289] + z[307]) + z[155]*(z[163] + z[17]*(z[145] - z[209]) + z[171] + z[250]);
  dfdx[47] = -Ixy*x[5] - Iyz*z[22] + Izz*x[6] - z[12] + z[139]*(x[5]*z[147] + z[138] + z[372]) + z[155]*(x[7]*z[321] + 2*z[130]*z[19] + z[144]*z[16] + z[17]*z[332] + z[357]);
  dfdx[48] = 0;
  dfdx[49] = z[156]*(x[6]*(z[117]*z[334]*z[59] + z[186] + z[200] + z[201] + z[228] + z[233] + z[370]) - x[7]*z[345] - x[7]*z[391] + z[344]) + z[172]*(x[5]*z[391] + z[16]*z[343] + z[16]*(z[127]*z[40]*(z[105] - z[27]*z[37]*z[47]*z[67] - z[27]*z[74] - z[30]*z[60]*z[64] - z[30]*z[63]*z[64] - z[33]*z[39]*z[92] + z[35]*z[39]*z[6]*z[84] + z[88] + z[93] + z[94]) + z[368] + z[369]) + z[346]) - z[23]*(z[1]*z[31]*(z[0]*z[112]*z[117]*z[32] + z[122]*z[56]) + z[142]*z[42] + z[161]*z[32]*z[4] + z[267]*z[44]) + z[264]*z[386] + z[267]*z[384];
  dfdx[50] = z[156]*(x[6]*(x[6]*z[246] + z[210]) + x[6]*(z[117]*z[59]*(z[0]*z[34]*z[58]*z[60] + z[0]*z[34]*z[58]*z[63] - z[0]*z[34]*z[68] + z[100] + z[103] + z[104] - z[27]*z[40]*z[55]*z[64] - z[33]*z[39]*z[47]*z[64] - z[61]*z[91] - z[66]*z[86] + z[99]) + z[389]) + z[19]*z[378] + z[19]*(-x[7]*z[246] + z[256])) + z[172]*(x[5]*z[337] + x[5]*z[378] + z[16]*z[306] + z[16]*(z[127]*z[40]*(z[100] + z[103] - z[27]*z[43]*z[47]*z[64] - z[31]*z[4]*z[68] - z[33]*z[39]*z[47]*z[64] + z[35]*z[39]*z[6]*z[71] - z[61]*z[91] - z[66]*z[86] + z[97] + z[98] + z[99]) + z[367] + z[374])) - z[23]*(-z[161]*z[46] - z[44]*(f - z[0]*z[122]*z[2]) - z[44]*(z[0]*z[116]*z[2] + z[127]*z[40]*(-z[27]*z[47]*z[6] + z[47]*z[61])) - z[46]*(z[0]*z[1]*z[122] + z[102]*z[117]*z[59])) + z[246]*z[384] + z[247]*z[386];
  dfdx[51] = 0;
  dfdx[52] = 0;
  dfdx[53] = Ixx*x[7] - Ixz*z[20] - Iyz*x[6] - z[10] + z[156]*(z[138] + z[153] + z[373]) + z[167]*(z[151]*z[19] + z[16]*z[333] + 2*z[160] + z[371]);
  dfdx[54] = z[11] - z[14] + z[156]*(z[137] + z[338] + z[354]) + z[172]*(-x[5]*z[108]*z[118] - x[6]*z[245] + z[136] - z[142]*z[18] + z[180] - z[323]);
  dfdx[55] = Ixy*x[6] + Ixz*z[22] - Izz*x[5] + z[13] + z[156]*(x[6]*z[332] + z[151]*z[22] + z[152] + z[19]*z[297] + z[317]) + z[167]*(z[146] + z[171] + z[372]);
  dfdx[56] = 0;
  dfdx[57] = z[130]*z[21]*(x[6]*z[394] + z[19]*z[345] + z[19]*(z[118]*z[243]*z[31] + z[217]*z[243]*z[34] + z[375]) + z[344]) + z[166]*(x[7]*z[343] + x[7]*(z[114]*z[34]*z[40]*(z[212] - z[27]*z[47]*z[86] - z[39]*z[74]) + z[125]*z[129]*z[40]*(z[212] - z[27]*z[47]*z[86] - z[39]*z[74]) + z[361] + z[368]) + z[17]*z[342] + z[17]*z[394]) - z[23]*(z[0]*z[147] + z[1]*z[130]*z[34] + z[1]*z[255]*z[31] + z[265]*z[4]) + z[255]*z[382] + z[265]*z[388];
  dfdx[58] = z[110]*z[118]*(x[6]*z[229] + x[6]*z[354] - x[7]*z[235] - x[7]*(-z[114]*z[257]*z[7] - z[175])) + z[130]*z[21]*(x[6]*z[307] + x[6]*z[396] + z[19]*z[336] + z[19]*(z[128]*z[272]*z[34] + z[269] + z[363])) + z[166]*(x[7]*z[306] + x[7]*(z[121]*z[243]*z[44] + z[125]*z[40]*(-3*z[27]*z[47]*z[6] + 3*z[47]*z[61])*(z[212] - z[27]*z[47]*z[86] - z[39]*z[74]) + z[195] + z[365] + z[367]) + z[17]*z[396] + z[311]) - z[23]*(z[102]*z[118]*z[31]*z[42] + z[130]*z[44] + z[245]*z[4]) + z[245]*z[388];
  dfdx[59] = 0;
  dfdx[60] = 0;
  dfdx[61] = -Ixx*x[6] + Ixy*z[20] + Iyz*x[7] + z[12] + z[141]*(z[146] + z[163] + z[373]) + z[166]*(x[7]*z[333] + z[132]*z[20] + z[17]*z[322] + z[241] + z[318]);
  dfdx[62] = -Ixy*z[18] - Ixz*x[7] + Iyy*x[5] - z[13] + z[141]*(z[132]*z[17] + z[338] + z[358]) + z[161]*z[21]*(z[153] + z[161]*z[17] + z[336]);
  dfdx[63] = z[14] + z[141]*(x[6]*z[330] - x[7]*z[297] - z[147]*z[22] + z[152] + z[317]) - z[15] + z[166]*(x[7]*(z[113]*z[29]*z[31]*z[43] + z[113]*z[34]*z[60] + z[263]) + z[132]*z[22] + z[148] + z[17]*z[330] + z[188] + z[323]);

  // Entries of Jacobian matrix
  return GSL_SUCCESS;
}


void rattleback_outputs(simdata *s, rattleback_params *p)
{
  double dxdt[8];
  double *x = s->x;
  const double a = p->a,
               b = p->b,
               c = p->c,
               d = p->d,
               e = p->e,
               f = p->f,
               m = p->m,
               Ixx = p->Ixx,
               Iyy = p->Iyy,
               Izz = p->Izz,
               Ixy = p->Ixy,
               Iyz = p->Iyz,
               Ixz = p->Ixz,
               g = p->g;
  double z[90];
  
  // Compute dxdt
  rattleback_ode(s->t, s->x, dxdt, static_cast<void *>(p));

  // Output quantites (evaluated at each output time-step)
  z[0] = cos(x[2]);
  z[1] = pow(b, 2);
  z[2] = sin(x[1]);
  z[3] = pow(a, 2);
  z[4] = cos(x[1]);
  z[5] = sin(x[2]);
  z[6] = pow(c, 2);
  z[7] = 0.5*m;
  z[8] = g*m;
  z[9] = m*dxdt[6];
  z[10] = -x[7];
  z[11] = m*dxdt[5];
  z[12] = m*dxdt[7];
  z[13] = -dxdt[1];
  z[14] = -x[5];
  z[15] = -x[6];
  z[16] = pow(z[4], 2);
  z[17] = pow(z[0], 2);
  z[18] = pow(z[5], 2);
  z[19] = m*z[0];
  z[20] = dxdt[1]*z[2];
  z[21] = z[0]*z[4];
  z[22] = z[2]*z[5];
  z[23] = z[4]*z[5];
  z[24] = z[0]*z[6];
  z[25] = z[18]*z[3];
  z[26] = z[17]*z[6];
  z[27] = dxdt[2]*z[16]*z[5];
  z[28] = 0.5*x[7]*(Ixz*x[5] + Iyz*x[6] + Izz*x[7]);
  z[29] = 0.5*x[5]*(Ixx*x[5] + Ixy*x[6] + Ixz*x[7]);
  z[30] = 0.5*x[6]*(Ixy*x[5] + Iyy*x[6] + Iyz*x[7]);
  z[31] = z[1]*pow(z[2], 2) + z[16]*z[25] + z[16]*z[26];
  z[32] = pow(z[31], -1.0/2.0);
  z[33] = pow(z[32], 3);
  z[34] = z[28] + z[29] + z[30];
  z[35] = z[3]*z[32];
  z[36] = z[1]*z[32];
  z[37] = z[32]*z[6];
  z[38] = e - z[2]*z[36];
  z[39] = z[2]*z[36];
  z[40] = -e + z[39];
  z[41] = x[5]*z[38];
  z[42] = f - z[21]*z[37];
  z[43] = -d - z[23]*z[35];
  z[44] = x[6]*z[42];
  z[45] = dxdt[2]*z[23]*z[37];
  z[46] = z[20]*z[24]*z[32];
  z[47] = d + z[23]*z[35];
  z[48] = x[5]*z[42];
  z[49] = -z[42];
  z[50] = x[6]*z[43];
  z[51] = z[14]*z[42];
  z[52] = x[7]*z[47];
  z[53] = x[6]*z[47];
  z[54] = -z[43];
  z[55] = z[10]*z[43];
  z[56] = z[54]*z[9];
  z[57] = -z[0]*z[27]*z[3] - z[1]*z[20]*z[4] + z[20]*z[25]*z[4] + z[20]*z[26]*z[4] + z[24]*z[27];
  z[58] = -x[7]*z[38] + z[44];
  z[59] = x[7]*z[40] + z[44];
  z[60] = z[10]*z[38] + z[44];
  z[61] = z[14]*z[40] + z[50];
  z[62] = z[41] + z[50];
  z[63] = pow(z[60], 2);
  z[64] = z[12]*z[38] + z[49]*z[9];
  z[65] = x[6]*z[62];
  z[66] = z[45] + z[46];
  z[67] = -z[48] + z[55];
  z[68] = z[51] + z[55];
  z[69] = -z[11]*z[38] + z[56];
  z[70] = x[5]*z[68];
  z[71] = z[11]*z[42] + z[12]*z[43];
  z[72] = z[10]*(x[7]*z[54] + z[51]);
  z[73] = z[33]*z[57];
  z[74] = -z[73];
  z[75] = z[6]*z[73];
  z[76] = z[1]*z[2]*z[73];
  z[77] = z[2]*z[38] + z[21]*(f - z[24]*z[32]*z[4]) - z[23]*z[47];
  z[78] = -dxdt[1]*z[36]*z[4] - z[76];
  z[79] = z[1]*z[2]*z[74] + z[13]*z[36]*z[4];
  z[80] = x[5]*z[79];
  z[81] = z[10]*z[79];
  z[82] = -z[21]*z[75] + z[66];
  z[83] = dxdt[2]*z[21]*z[35] + z[13]*z[22]*z[35] + z[23]*z[3]*z[73];
  z[84] = x[6]*z[82];
  z[85] = x[7]*z[83];
  z[86] = x[6]*z[83];
  z[87] = z[15]*z[83];
  z[88] = z[72] + z[81] + z[84];
  z[89] = z[70] + z[80] + z[87];

  // Contact forces
  s->CF[0] = m*z[5]*(x[5]*z[67] + x[5]*z[78] - x[6]*z[60] - z[86]) - z[0]*z[64] + z[19]*(x[6]*(z[21]*z[6]*z[74] + z[66]) + z[10]*z[78] + z[10]*(x[7]*z[54] - z[48]) + z[65]) - z[5]*z[69];
  s->CF[1] = m*z[22]*(x[6]*z[61] + z[88]) + m*z[4]*(x[7]*z[59] + z[14]*z[82] + z[14]*(-x[5]*z[40] + z[50]) + z[85]) + z[0]*z[2]*(z[11]*z[40] + z[56]) - z[19]*z[2]*(z[15]*z[59] + z[89]) - z[22]*(-z[12]*z[40] - z[42]*z[9]) - z[4]*z[71];
  s->CF[2] = m*z[2]*(-x[5]*z[62] - x[5]*z[82] + x[7]*z[58] + z[85]) - m*z[23]*(x[6]*(x[6]*(-d - z[35]*z[4]*z[5]) + z[41]) + x[6]*(dxdt[2]*z[37]*z[4]*z[5] - z[21]*z[75] + z[46]) + z[10]*(-x[7]*(-d - z[35]*z[4]*z[5]) + z[51]) + z[81]) + z[19]*z[4]*(z[15]*z[58] + z[89]) - z[2]*z[71] - z[21]*z[69] + z[23]*z[64] - z[8];

  // Mechanical energy
  s->ke = z[34] + z[7]*(z[63] + pow(z[41] - z[53], 2) + pow(-z[48] + z[52], 2));
  s->pe = -z[77]*z[8];
  s->te = s->ke + s->pe;

  // Tilt of Rattleback with respect to vertical
  s->delta = acos(z[21]);

  // Body fixed angular velocity
  s->alpha[0] = dxdt[5];
  s->alpha[1] = dxdt[6];
  s->alpha[2] = dxdt[7];
}
