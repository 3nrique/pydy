
from .codegen.code import generate_ode_function
from scipy.integrate import odeint

class System(object):
    """Manages the simulation (integration) of a system whose equations are
    given by KanesMethod or LagrangesMethod.

    All attributes can be set directly. With the exception of `method`, the
    attributes can also be set via keyword arguments to the constructor.

    Attributes
    ----------
    method : sympy.physics.mechanics.KanesMethod or
                sympy.physics.mechanics.LagrangesMethod
        The method used to generate the equations of motion.
    constants : dict, optional (default: all 1.0)
        Numerical values for the constants in the problem (all non-dynamics
        symbols). Keys are the symbols for the constants, and values are
        floats. Constants that are not specified in this dict are given a
        default value of 1.0.
    specifieds : dict, optional (default: all 0)
        Numerical values for the specified quantities in the problem (all
        dynamicsymbols that are not given by the `method`). Keys are the
        symbols for the specified quantities, or a tuple of symbols, and values
        are the floats, arrays of floats, or functions that generate the
        values. If a dictionary value is a function, it must have the same
        signature as `f(x, t)`, the ode right-hand-side function (see the
        documentation for the `ode_solver` attribute). You needn't provide
        values for all specified symbols. Those for which you do not give a
        value will default to 0.0.
    code_gen_backend : str, optional (default: 'lambdify')
        The backend used to generate the ode function.
        See the documentation of pydy.codegen.code.generate_ode_function`.
    ode_solver : function, optional (default: scipy.integrate.odeint)
        A function that performs forward integration. It must have the same
        signature as odeint, which is::
       
            x_history = ode_solver(f, x0, t, args=(args,))

        where f is a function f(x, t), x0 are the initial conditions, x_history
        is the history, x is the state, t is the time, and args is a keyword
        argument takes arguments that are then passed to f. 
    initial_conditions : dict, optional (default: all zero)
        Initial conditions for all coordinates and speeds. Keys are the symbols
        for the coordinates and speeds, and values are floats. Coordinates or
        speeds that are not specified in this dict are given a default value of
        zero.

    """
    def __init__(self, method, **kwargs):
        self.method = method
        for k, v in kwargs:
            setattr(self, k, v)
        if self.constants == None:
            self.constants = self._find_constants()
        if self.specifieds == None:
            self._check_specified()
            # TODO
            pass
        if self.code_gen_backend != None:
            self.code_gen_backend = 'lambdify'
        if ode_solver != None:
            self.ode_solver = odeint
        self._rhs = None

    @property
    def rhs(self):
        """A function generated by `generate_ode_function` that computes the
        state derivatives:
        
            xdot = rhs(x, t)

        This function is used by the `ode_solver`.

        """
        return self._rhs

    def _find_constants(self):
        othersymbols = method._find_othersymbols()
        return dict(zip(othersymbols, len(othersymbols) * [1.0]))

    def _find_specifieds(self):
        specified_symbols = method._find_dynamicsymbols()
        return dict(zip(specified_symbols, len(specified_symbols) * [0.0]))

    def generate_ode_function(self):
        """Calls `pydy.
        
        """
        self._rhs = generate_ode_function(
                self.method.mass_matrix_full, self.method.forcing_full,
                self.constants.keys(),
                self.method._q, self.method._u)



#for k, v in kwargs:
#    setattr(self, k, v)
#sys.generate_ode_function(backend=...)
#sys.code_gen_backend = 
#sys.ode_solver = odeint
#sys.specified_symbols =
#sys.specified_values =
#sys.initial_conditions =
#sys.constants = 
#
#class Sys:
#    self.initial_conditions = zero(
#    def integrate(self, times):
#        # make rhs
#        sys.ode_solver(self.rhs, self.initial_conditions, times,
#                args=(self.con)
#    

